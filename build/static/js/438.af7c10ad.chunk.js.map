{"version":3,"file":"static/js/438.af7c10ad.chunk.js","mappings":"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","sources":["../node_modules/formik/node_modules/deepmerge/dist/es.js","../node_modules/lodash-es/clone.js","../node_modules/lodash-es/toPath.js","../node_modules/lodash-es/cloneDeep.js","../node_modules/formik/src/utils.ts","../node_modules/formik/src/FormikContext.tsx","../node_modules/formik/src/Formik.tsx","../node_modules/formik/src/Form.tsx","../node_modules/formik/src/FieldArray.tsx","../node_modules/formik/src/ErrorMessage.tsx","../node_modules/formik/src/FastField.tsx","../node_modules/react-fast-compare/index.js"],"sourcesContent":["var isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nexport default deepmerge_1;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import arrayMap from './_arrayMap.js';\nimport copyArray from './_copyArray.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\nimport stringToPath from './_stringToPath.js';\nimport toKey from './_toKey.js';\nimport toString from './toString.js';\n\n/**\n * Converts `value` to a property path array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * _.toPath('a.b.c');\n * // => ['a', 'b', 'c']\n *\n * _.toPath('a[0].b.c');\n * // => ['a', '0', 'b', 'c']\n */\nfunction toPath(value) {\n  if (isArray(value)) {\n    return arrayMap(value, toKey);\n  }\n  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n}\n\nexport default toPath;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the value an empty array? */\nexport const isEmptyArray = (value?: any) =>\n  Array.isArray(value) && value.length === 0;\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): obj is Object =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport invariant from 'tiny-warning';\n\nexport const FormikContext = React.createContext<FormikContextType<any>>(\n  undefined as any\n);\nFormikContext.displayName = 'FormikContext';\n\nexport const FormikProvider = FormikContext.Provider;\nexport const FormikConsumer = FormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  const formik = React.useContext<FormikContextType<Values>>(FormikContext);\n\n  invariant(\n    !!formik,\n    `Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.`\n  );\n\n  return formik;\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash/isPlainObject';\nimport {\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FormikHelpers,\n  FormikHandlers,\n} from './types';\nimport {\n  isFunction,\n  isString,\n  setIn,\n  isEmptyChildren,\n  isPromise,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  isObject,\n} from './utils';\nimport { FormikProvider } from './FormikContext';\nimport invariant from 'tiny-warning';\n\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | {\n      type: 'SET_FORMIK_STATE';\n      payload: (s: FormikState<Values>) => FormikState<Values>;\n    }\n  | {\n      type: 'RESET_FORM';\n      payload: FormikState<Values>;\n    };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n      return { ...state, ...msg.payload };\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<unknown> = {};\nconst emptyTouched: FormikTouched<unknown> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\n\nexport function useFormik<Values extends FormikValues = FormikValues>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  validateOnMount = false,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = {\n    validateOnChange,\n    validateOnBlur,\n    validateOnMount,\n    onSubmit,\n    ...rest,\n  };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>({});\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const [state, dispatch] = React.useReducer<\n    React.Reducer<FormikState<Values>, FormikMessage<Values>>\n  >(formikReducer, {\n    values: props.initialValues,\n    errors: props.initialErrors || emptyErrors,\n    touched: props.initialTouched || emptyTouched,\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const runValidateHandler = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      return new Promise((resolve, reject) => {\n        const maybePromisedErrors = (props.validate as any)(values, field);\n        if (maybePromisedErrors == null) {\n          // use loose null check here on purpose\n          resolve(emptyErrors);\n        } else if (isPromise(maybePromisedErrors)) {\n          (maybePromisedErrors as Promise<any>).then(\n            errors => {\n              resolve(errors || emptyErrors);\n            },\n            actualException => {\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validate />`,\n                  actualException\n                );\n              }\n\n              reject(actualException);\n            }\n          );\n        } else {\n          resolve(maybePromisedErrors);\n        }\n      });\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      const validationSchema = props.validationSchema;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      const promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      return new Promise((resolve, reject) => {\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            // Yup will throw a validation error if validation fails. We catch those and\n            // resolve them into Formik errors. We can sniff if something is a Yup error\n            // by checking error.name.\n            // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n            if (err.name === 'ValidationError') {\n              resolve(yupToFormErrors(err));\n            } else {\n              // We throw any other errors\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validationSchema />`,\n                  err\n                );\n              }\n\n              reject(err);\n            }\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string): Promise<string> => {\n      return new Promise(resolve =>\n        resolve(fieldRegistry.current[field].validate(value) as string)\n      );\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations: Promise<string>[] =\n        fieldKeysWithValidation.length > 0\n          ? fieldKeysWithValidation.map(f =>\n              runSingleFieldLevelValidation(f, getIn(values, f))\n            )\n          : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n      return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n        fieldErrorsList.reduce((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {})\n      );\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      });\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runAllValidations(values).then(combinedErrors => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n        }\n        return combinedErrors;\n      });\n    }\n  );\n\n  React.useEffect(() => {\n    if (\n      validateOnMount &&\n      isMounted.current === true &&\n      isEqual(initialValues.current, props.initialValues)\n    ) {\n      validateFormWithHighPriority(initialValues.current);\n    }\n  }, [validateOnMount, validateFormWithHighPriority]);\n\n  const resetForm = React.useCallback(\n    (nextState?: Partial<FormikState<Values>>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      const dispatchFn = () => {\n        dispatch({\n          type: 'RESET_FORM',\n          payload: {\n            isSubmitting: !!nextState && !!nextState.isSubmitting,\n            errors,\n            touched,\n            status,\n            values,\n            isValidating: !!nextState && !!nextState.isValidating,\n            submitCount:\n              !!nextState &&\n              !!nextState.submitCount &&\n              typeof nextState.submitCount === 'number'\n                ? nextState.submitCount\n                : 0,\n          },\n        });\n      };\n\n      if (props.onReset) {\n        const maybePromisedOnReset = (props.onReset as any)(\n          state.values,\n          imperativeMethods\n        );\n\n        if (isPromise(maybePromisedOnReset)) {\n          (maybePromisedOnReset as Promise<any>).then(dispatchFn);\n        } else {\n          dispatchFn();\n        }\n      } else {\n        dispatchFn();\n      }\n    },\n    [props.initialErrors, props.initialStatus, props.initialTouched]\n  );\n\n  React.useEffect(() => {\n    if (\n      isMounted.current === true &&\n      !isEqual(initialValues.current, props.initialValues)\n    ) {\n      if (enableReinitialize) {\n        initialValues.current = props.initialValues;\n        resetForm();\n      }\n\n      if (validateOnMount) {\n        validateFormWithHighPriority(initialValues.current);\n      }\n    }\n  }, [\n    enableReinitialize,\n    props.initialValues,\n    resetForm,\n    validateOnMount,\n    validateFormWithHighPriority,\n  ]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialErrors.current, props.initialErrors)\n    ) {\n      initialErrors.current = props.initialErrors || emptyErrors;\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: props.initialErrors || emptyErrors,\n      });\n    }\n  }, [enableReinitialize, props.initialErrors]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialTouched.current, props.initialTouched)\n    ) {\n      initialTouched.current = props.initialTouched || emptyTouched;\n      dispatch({\n        type: 'SET_TOUCHED',\n        payload: props.initialTouched || emptyTouched,\n      });\n    }\n  }, [enableReinitialize, props.initialTouched]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialStatus.current, props.initialStatus)\n    ) {\n      initialStatus.current = props.initialStatus;\n      dispatch({\n        type: 'SET_STATUS',\n        payload: props.initialStatus,\n      });\n    }\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\n\n  const validateField = useEventCallback((name: string) => {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (\n      fieldRegistry.current[name] &&\n      isFunction(fieldRegistry.current[name].validate)\n    ) {\n      const value = getIn(state.values, name);\n      const maybePromise = fieldRegistry.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else if (props.validationSchema) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runValidationSchema(state.values, name)\n        .then((x: any) => x)\n        .then((error: any) => {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: { field: name, value: error[name] },\n          });\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        });\n    }\n\n    return Promise.resolve();\n  });\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback(\n    (touched: FormikTouched<Values>, shouldValidate?: boolean) => {\n      dispatch({ type: 'SET_TOUCHED', payload: touched });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback(\n    (values: React.SetStateAction<Values>, shouldValidate?: boolean) => {\n      const resolvedValues = isFunction(values) ? values(state.values) : values;\n\n      dispatch({ type: 'SET_VALUES', payload: resolvedValues });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(resolvedValues)\n        : Promise.resolve();\n    }\n  );\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    }\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as any).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const target = eventOrTextValue.target\n          ? (eventOrTextValue as React.ChangeEvent<any>).target\n          : (eventOrTextValue as React.ChangeEvent<any>).currentTarget;\n\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n          options,\n          multiple,\n        } = target;\n\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && __DEV__) {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) // checkboxes\n          ? getValueForCheckbox(getIn(state.values, field!), checked, value)\n          : options && multiple // <select multiple>\n          ? getSelectedValues(options)\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue, state.values]\n  );\n\n  const handleChange = useEventCallback<FormikHandlers['handleChange']>(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    }\n  );\n\n  const setFieldTouched = useEventCallback(\n    (field: string, touched: boolean = true, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && __DEV__) {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = useEventCallback<FormikHandlers['handleBlur']>(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    }\n  );\n\n  const setFormikState = React.useCallback(\n    (\n      stateOrCb:\n        | FormikState<Values>\n        | ((state: FormikState<Values>) => FormikState<Values>)\n    ): void => {\n      if (isFunction(stateOrCb)) {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n      } else {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: () => stateOrCb });\n      }\n    },\n    []\n  );\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateFormWithHighPriority().then(\n      (combinedErrors: FormikErrors<Values>) => {\n        // In case an error was thrown and passed to the resolved Promise,\n        // `combinedErrors` can be an instance of an Error. We need to check\n        // that and abort the submit.\n        // If we don't do that, calling `Object.keys(new Error())` yields an\n        // empty array, which causes the validation to pass and the form\n        // to be submitted.\n\n        const isInstanceOfError = combinedErrors instanceof Error;\n        const isActuallyValid =\n          !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n        if (isActuallyValid) {\n          // Proceed with submit...\n          //\n          // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n          // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n          // This would be fine in simple cases, but make it impossible to disable submit\n          // buttons where people use callbacks or promises as side effects (which is basically\n          // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n          //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n          // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n          // cleanup of isSubmitting on behalf of the consumer.\n          let promiseOrUndefined;\n          try {\n            promiseOrUndefined = executeSubmit();\n            // Bail if it's sync, consumer is responsible for cleaning up\n            // via setSubmitting(false)\n            if (promiseOrUndefined === undefined) {\n              return;\n            }\n          } catch (error) {\n            throw error;\n          }\n\n          return Promise.resolve(promiseOrUndefined)\n            .then(result => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_SUCCESS' });\n              }\n              return result;\n            })\n            .catch(_errors => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_FAILURE' });\n                // This is a legit error rejected by the onSubmit fn\n                // so we don't want to break the promise chain\n                throw _errors;\n              }\n            });\n        } else if (!!isMounted.current) {\n          // ^^^ Make sure Formik is still mounted before updating state\n          dispatch({ type: 'SUBMIT_FAILURE' });\n          // throw combinedErrors;\n          if (isInstanceOfError) {\n            throw combinedErrors;\n          }\n        }\n        return;\n      }\n    );\n  });\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (__DEV__ && typeof document !== 'undefined') {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      submitForm().catch(reason => {\n        console.warn(\n          `Warning: An unhandled error was caught from submitForm()`,\n          reason\n        );\n      });\n    }\n  );\n\n  const imperativeMethods: FormikHelpers<Values> = {\n    resetForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n    submitForm,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  });\n\n  const handleReset = useEventCallback(e => {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    resetForm();\n  });\n\n  const getFieldMeta = React.useCallback(\n    (name: string): FieldMetaProps<any> => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldHelpers = React.useCallback(\n    (name: string): FieldHelperProps<any> => {\n      return {\n        setValue: (value: any, shouldValidate?: boolean) =>\n          setFieldValue(name, value, shouldValidate),\n        setTouched: (value: boolean, shouldValidate?: boolean) =>\n          setFieldTouched(name, value, shouldValidate),\n        setError: (value: any) => setFieldError(name, value),\n      };\n    },\n    [setFieldValue, setFieldTouched, setFieldError]\n  );\n\n  const getFieldProps = React.useCallback(\n    (nameOrOptions): FieldInputProps<any> => {\n      const isAnObject = isObject(nameOrOptions);\n      const name = isAnObject ? nameOrOptions.name : nameOrOptions;\n      const valueState = getIn(state.values, name);\n\n      const field: FieldInputProps<any> = {\n        name,\n        value: valueState,\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n      if (isAnObject) {\n        const {\n          type,\n          value: valueProp, // value is special for checkboxes\n          as: is,\n          multiple,\n        } = nameOrOptions;\n\n        if (type === 'checkbox') {\n          if (valueProp === undefined) {\n            field.checked = !!valueState;\n          } else {\n            field.checked = !!(\n              Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n            );\n            field.value = valueProp;\n          }\n        } else if (type === 'radio') {\n          field.checked = valueState === valueProp;\n          field.value = valueProp;\n        } else if (is === 'select' && multiple) {\n          field.value = field.value || [];\n          field.multiple = true;\n        }\n      }\n      return field;\n    },\n    [handleBlur, handleChange, state.values]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    validateOnBlur,\n    validateOnChange,\n    validateOnMount,\n  };\n\n  return ctx;\n}\n\nexport function Formik<\n  Values extends FormikValues = FormikValues,\n  ExtraProps = {}\n>(props: FormikConfig<Values> & ExtraProps) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render, innerRef } = props;\n\n  // This allows folks to pass a ref to <Formik />\n  React.useImperativeHandle(innerRef, () => formikbag);\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !props.render,\n        `<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>`\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n    for (let err of yupError.inner) {\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  const validateData: FormikValues = prepareDataForValidation(values);\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * Recursively prepare values.\n */\nexport function prepareDataForValidation<T extends FormikValues>(\n  values: T\n): FormikValues {\n  let data: FormikValues = Array.isArray(values) ? [] : {};\n  for (let k in values) {\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\n      const key = String(k);\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map((value: any) => {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n  return data;\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function merge(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\n/** Return multi select values based on an array of options */\nfunction getSelectedValues(options: any[]) {\n  return Array.from(options)\n    .filter(el => el.selected)\n    .map(el => el.value);\n}\n\n/** Return the next value for a checkbox */\nfunction getValueForCheckbox(\n  currentValue: string | any[],\n  checked: boolean,\n  valueProp: any\n) {\n  // If the current value was a boolean, return a boolean\n  if (typeof currentValue === 'boolean') {\n    return Boolean(checked);\n  }\n\n  // If the currentValue was not a boolean we want to return an array\n  let currentArrayOfValues = [];\n  let isValueInArray = false;\n  let index = -1;\n\n  if (!Array.isArray(currentValue)) {\n    // eslint-disable-next-line eqeqeq\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\n      return Boolean(checked);\n    }\n  } else {\n    // If the current value is already an array, use it\n    currentArrayOfValues = currentValue;\n    index = currentValue.indexOf(valueProp);\n    isValueInArray = index >= 0;\n  }\n\n  // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\n  if (checked && valueProp && !isValueInArray) {\n    return currentArrayOfValues.concat(valueProp);\n  }\n\n  // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\n  if (!isValueInArray) {\n    return currentArrayOfValues;\n  }\n\n  // If the checkbox was unchecked and the value is in the array, remove the value and return the array\n  return currentArrayOfValues\n    .slice(0, index)\n    .concat(currentArrayOfValues.slice(index + 1));\n}\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref: any = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  return React.useCallback(\n    (...args: any[]) => ref.current.apply(void 0, args),\n    []\n  ) as T;\n}\n","import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\ntype FormProps = React.ComponentPropsWithoutRef<'form'>;\n\n// @todo tests\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props: FormikFormProps, ref) => {\n    // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n    // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n    const { action, ...rest } = props;\n    const _action = action ?? '#';\n    const { handleReset, handleSubmit } = useFormikContext();\n    return (\n      <form\n        onSubmit={handleSubmit}\n        ref={ref}\n        onReset={handleReset}\n        action={_action}\n        {...rest}\n      />\n    );\n  }\n);\n\nForm.displayName = 'Form';\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyChildren,\n  isFunction,\n  setIn,\n  isEmptyArray,\n} from './utils';\nimport isEqual from 'react-fast-compare';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = copyArrayLike(array);\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (\n  arrayLike: ArrayLike<any>,\n  indexA: number,\n  indexB: number\n) => {\n  const copy = copyArrayLike(arrayLike);\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nconst copyArrayLike = (arrayLike: ArrayLike<any>) => {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [...arrayLike];\n  } else {\n    const maxIndex = Object.keys(arrayLike)\n      .map(key => parseInt(key))\n      .reduce((max, el) => (el > max ? el : max), 0);\n    return Array.from({ ...arrayLike, length: maxIndex + 1 });\n  }\n};\n\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContextType<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContextType<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  componentDidUpdate(\n    prevProps: FieldArrayConfig & { formik: FormikContextType<Values> }\n  ) {\n    if (\n      this.props.validateOnChange &&\n      this.props.formik.validateOnChange &&\n      !isEqual(\n        getIn(prevProps.formik.values, prevProps.name),\n        getIn(this.props.formik.values, this.props.name)\n      )\n    ) {\n      this.props.formik.validateForm(this.props.formik.values);\n    }\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n\n      formik: { setFormikState },\n    } = this.props;\n    setFormikState((prevState: FormikState<any>) => {\n      let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n      let updateTouched =\n        typeof alterTouched === 'function' ? alterTouched : fn;\n\n      // values fn should be executed before updateErrors and updateTouched,\n      // otherwise it causes an error with unshift.\n      let values = setIn(\n        prevState.values,\n        name,\n        fn(getIn(prevState.values, name))\n      );\n\n      let fieldError = alterErrors\n        ? updateErrors(getIn(prevState.errors, name))\n        : undefined;\n      let fieldTouched = alterTouched\n        ? updateTouched(getIn(prevState.touched, name))\n        : undefined;\n\n      if (isEmptyArray(fieldError)) {\n        fieldError = undefined;\n      }\n      if (isEmptyArray(fieldTouched)) {\n        fieldTouched = undefined;\n      }\n\n      return {\n        ...prevState,\n        values,\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fieldError)\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fieldTouched)\n          : prevState.touched,\n      };\n    });\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (arrayLike: ArrayLike<any>) => [\n        ...copyArrayLike(arrayLike),\n        cloneDeep(value),\n      ],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? copyArrayLike(array) : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n      ? (render as any)(props)\n      : children // children come last, always called\n      ? typeof children === 'function'\n        ? (children as any)(props)\n        : !isEmptyChildren(children)\n        ? React.Children.only(children)\n        : null\n      : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: (errorMessage: string) => React.ReactNode;\n  render?: (errorMessage: string) => React.ReactNode;\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContextType<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContextType<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render)\n          ? render(error)\n          : null\n        : children\n        ? isFunction(children)\n          ? children(error)\n          : null\n        : component\n        ? React.createElement(component, rest as any, error)\n        : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContextType<any> }\n>(ErrorMessageImpl);\n","import * as React from 'react';\n\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContextType,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport invariant from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\nimport { FieldConfig } from './Field';\nimport { connect } from './connect';\n\ntype $FixMe = any;\n\nexport interface FastFieldProps<V = any> {\n  field: FieldInputProps<V>;\n  meta: FieldMetaProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport type FastFieldConfig<T> = FieldConfig & {\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate,\n    });\n  }\n\n  componentDidUpdate(prevProps: FastFieldAttributes<Props>) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = formik.getFieldProps({ name, ...props });\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return React.createElement(\n          component,\n          { ref: innerRef, ...field, ...(rest as $FixMe) },\n          children\n        );\n      }\n      // We don't pass `meta` for backwards compat\n      return React.createElement(\n        component as React.ComponentClass<$FixMe>,\n        { field, form: formik, ...props },\n        children\n      );\n    }\n\n    // default to input here so we can check for both `as` and `children` above\n    const asElement = is || 'input';\n\n    if (typeof asElement === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        asElement,\n        { ref: innerRef, ...field, ...(rest as $FixMe) },\n        children\n      );\n    }\n\n    return React.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\nvar hasElementType = typeof Element !== 'undefined';\n\nfunction equal(a, b) {\n  // fast-deep-equal index.js 2.0.1\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n    // end fast-deep-equal\n\n    // start react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element && b instanceof Element)\n      return a === b;\n\n    // custom handling for React\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of a react element\n        continue;\n      } else {\n        // all other properties should be traversed as usual\n        if (!equal(a[key], b[key])) return false;\n      }\n    }\n    // end react-fast-compare\n\n    // fast-deep-equal index.js 2.0.1\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function exportedEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if ((error.message && error.message.match(/stack|recursion/i)) || (error.number === -2146828260)) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n"],"names":["isMergeableObject","value","isNonNullObject","stringValue","Object","prototype","toString","call","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","Symbol","for","cloneUnlessOtherwiseSpecified","options","clone","deepmerge","val","Array","isArray","defaultArrayMerge","target","source","concat","map","element","arrayMerge","sourceIsArray","destination","keys","forEach","key","mergeObject","all","array","Error","reduce","prev","next","CLONE_SYMBOLS_FLAG","baseClone","arrayMap","toKey","isSymbol","copyArray","stringToPath","CLONE_DEEP_FLAG","isEmptyArray","length","isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","isEmptyChildren","children","Children","isPromise","then","getIn","def","p","path","toPath","undefined","setIn","res","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","_i","_Object$keys","k","get","set","FormikContext","createContext","displayName","Provider","Consumer","useFormikContext","formik","useContext","invariant","formikReducer","state","msg","type","_extends","values","payload","touched","isEqual","errors","status","isSubmitting","isValidating","field","submitCount","emptyErrors","emptyTouched","useFormik","_ref","validateOnChange","_ref$validateOnChange","validateOnBlur","_ref$validateOnBlur","validateOnMount","_ref$validateOnMount","isInitialValid","enableReinitialize","_ref$enableReinitiali","onSubmit","rest","_objectWithoutPropertiesLoose","props","initialValues","useRef","initialErrors","initialTouched","initialStatus","isMounted","fieldRegistry","useEffect","current","useReducer","_React$useReducer","dispatch","runValidateHandler","useCallback","Promise","resolve","reject","maybePromisedErrors","validate","actualException","runValidationSchema","validationSchema","schema","promise","validateAt","sync","context","validateData","prepareDataForValidation","abortEarly","validateYupSchema","err","name","yupError","inner","message","_iterator","_isArray","iterator","_ref5","done","yupToFormErrors","runSingleFieldLevelValidation","runFieldLevelValidations","fieldKeysWithValidation","filter","f","fieldValidations","fieldErrorsList","curr","index","runAllValidations","_ref2","fieldErrors","schemaErrors","validateErrors","validateFormWithHighPriority","useEventCallback","combinedErrors","resetForm","nextState","dispatchFn","onReset","maybePromisedOnReset","imperativeMethods","validateField","maybePromise","x","error","registerField","_ref3","unregisterField","setTouched","shouldValidate","setErrors","setValues","resolvedValues","setFieldError","setFieldValue","executeChange","eventOrTextValue","maybePath","parsed","persist","currentTarget","id","checked","outerHTML","multiple","test","parseFloat","isNaN","currentValue","valueProp","Boolean","currentArrayOfValues","isValueInArray","indexOf","getValueForCheckbox","from","el","selected","getSelectedValues","handleChange","eventOrPath","event","setFieldTouched","executeBlur","e","_e$target","handleBlur","eventOrString","setFormikState","stateOrCb","setStatus","setSubmitting","submitForm","isInstanceOfError","promiseOrUndefined","executeSubmit","result","_errors","handleSubmit","preventDefault","stopPropagation","reason","console","warn","validateForm","handleReset","getFieldMeta","initialValue","initialError","getFieldHelpers","setValue","setError","getFieldProps","nameOrOptions","isAnObject","valueState","onChange","onBlur","is","as","dirty","useMemo","isValid","data","hasOwnProperty","isPlainObject","shouldClone","push","useIsomorphicLayoutEffect","window","document","createElement","useLayoutEffect","fn","ref","_len","arguments","args","_key","apply","forwardRef","action","_action","_useFormikContext","assign","insert","arrayLike","copy","copyArrayLike","splice","maxIndex","parseInt","max","FieldArrayInner","_React$Component","_this","updateArrayField","alterTouched","alterErrors","_this$props","prevState","updateErrors","updateTouched","fieldError","fieldTouched","cloneDeep","handlePush","swap","indexA","indexB","a","handleSwap","move","to","handleMove","handleInsert","replace","handleReplace","unshift","arr","handleUnshift","handleRemove","remove","handlePop","pop","bind","_assertThisInitialized","componentDidUpdate","prevProps","this","tmp","render","arrayHelpers","component","_this$props2","form","Component","defaultProps","keyList","hasProp","hasElementType","Element","equal","b","arrA","arrB","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","module","exports","match","number"],"sourceRoot":""}